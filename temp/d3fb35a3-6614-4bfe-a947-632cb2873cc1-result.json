{"name": "【正确性检查】能正常修改配置，并下发成功【NOC-10087】", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=98.0.4758.102)", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e0eb7679b7eafa0b87a1101686564428\")>\nexpect_sn = '060052041000034', except_status = 'online', check_times = 2\n\n    def search_sn_and_click(driver, expect_sn, except_status, check_times=1):\n        # 输入框输入sn\n        while check_times > 0:\n            WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, UserPublicLocators.sn_input))).click()\n            WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, UserPublicLocators.sn_input))).send_keys(expect_sn)\n            # 点击查询\n            WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable((By.XPATH, UserPublicLocators.search_button))).click()\n            time.sleep(1)\n            try:\n>               devices_status = driver.find_elements_by_xpath(UserPublicLocators.devices_status)[0].get_attribute(\"class\")\nE               IndexError: list index out of range\n\ncommon\\user_public_fun.py:30: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope='session',autouse=True)\n    def driver():\n        get_log().info('开始执行用例')\n        driver = webdriver.Chrome(executable_path=r'E:\\software\\webdriver\\chromedriver.exe')\n        driver.get(conf.url)\n        driver.maximize_window()\n        driver.implicitly_wait(10)\n        # 用户登录\n        login_successfully(driver,root_username,root_password)\n        time.sleep(3)\n        # 进入设备列表\n        js = 'document.getElementsByClassName(\"el-menu-item\")[2].click()'\n        driver.execute_script(js)\n        time.sleep(3)\n        # 选择指定设备\n>       search_sn_and_click(driver, conf.except_sn, \"online\", 3)\n\ntestcase\\conftest.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\user_public_fun.py:41: in search_sn_and_click\n    driver.refresh()\nC:\\Program Files\\Python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in refresh\n    self.execute(Command.REFRESH)\nC:\\Program Files\\Python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000266D18779E8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...unk [0x76256739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77928AFF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77928ACD+1165]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=98.0.4758.102)\n\nC:\\Program Files\\Python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchWindowException"}, "description": "【正确性检查】能正常修改配置，并下发成功【NOC-10087】", "start": 1645890213574, "stop": 1645890213574, "uuid": "faa6809d-ada9-4a07-aac6-7c10fe6e7b6a", "historyId": "293ff61d33700cc4790036a95c8e1269", "testCaseId": "6fc6a06e160d174ceb1e52a9fe706c32", "fullName": "testcase.test_remote_management.Test_remote_management#test_2_edit_web_wan_access", "labels": [{"name": "feature", "value": "远程管理模块"}, {"name": "tag", "value": "remote_management"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_remote_management"}, {"name": "subSuite", "value": "Test_remote_management"}, {"name": "host", "value": "MS-PMKTNGVDRNAG"}, {"name": "thread", "value": "16296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_remote_management"}]}